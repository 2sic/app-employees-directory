// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "AppSettings.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class AppSettings
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.06.02
// App/Edition: People Directory/
// User:        2sic Web-Developer
// When:        2024-04-05 10:10:04Z
using ToSic.Sxc.Adam;

namespace AppCode.Data
{
  // This is a generated class for AppSettings (scope: System.App)
  // To extend/modify it, see instructions above.

  /// <summary>
  /// AppSettings data. <br/>
  /// Generated 2024-04-05 10:10:04Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.CompanyName`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  /// <remarks>
  /// This Content-Type is NOT in the default scope, so you may not see it in the Admin UI. It's in the scope System.App.
  /// </remarks>
  public partial class AppSettings: AutoGenerated.ZagAppSettings
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for System.App.AppSettings in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagAppSettings: Custom.Data.CustomItem
  {
    /// <summary>
    /// CompanyName as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("CompanyName", scrubHtml: true) etc.
    /// </summary>
    public string CompanyName => _item.String("CompanyName", fallback: "");

    /// <summary>
    /// CompanyPhone as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("CompanyPhone", scrubHtml: true) etc.
    /// </summary>
    public string CompanyPhone => _item.String("CompanyPhone", fallback: "");

    /// <summary>
    /// CompanyUrl as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("CompanyUrl")
    /// </summary>
    public string CompanyUrl => _item.Url("CompanyUrl");

    /// <summary>
    /// Get the file object for CompanyUrl - or null if it's empty or not referencing a file.
    /// </summary>
    public IFile CompanyUrlFile => _item.File("CompanyUrl");

    /// <summary>
    /// Get the folder object for CompanyUrl.
    /// </summary>
    public IFolder CompanyUrlFolder => _item.Folder("CompanyUrl");

    /// <summary>
    /// DetailsView as bool. <br/>
    /// To get nullable use .Get("DetailsView") as bool?;
    /// </summary>
    public bool DetailsView => _item.Bool("DetailsView");

    /// <summary>
    /// GoogleMapsKey as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("GoogleMapsKey", scrubHtml: true) etc.
    /// </summary>
    public string GoogleMapsKey => _item.String("GoogleMapsKey", fallback: "");

    /// <summary>
    /// GoogleMapsShowWarning as bool. <br/>
    /// To get nullable use .Get("GoogleMapsShowWarning") as bool?;
    /// </summary>
    public bool GoogleMapsShowWarning => _item.Bool("GoogleMapsShowWarning");
  }
}