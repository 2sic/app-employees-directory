// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "Person.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class Person
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.06.02
// App/Edition: People Directory/
// User:        2sic Web-Developer
// When:        2024-04-05 10:10:04Z
using ToSic.Sxc.Adam;
using ToSic.Sxc.Cms.Data;

namespace AppCode.Data
{
  // This is a generated class for Person 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// Person data. <br/>
  /// Generated 2024-04-05 10:10:04Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.AdditionalNotes`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class Person: AutoGenerated.ZagPerson
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.Person in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagPerson: Custom.Data.CustomItem
  {
    /// <summary>
    /// AdditionalNotes as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("AdditionalNotes", scrubHtml: true) etc.
    /// </summary>
    public string AdditionalNotes => _item.String("AdditionalNotes", fallback: "");

    /// <summary>
    /// City as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("City", scrubHtml: true) etc.
    /// </summary>
    public string City => _item.String("City", fallback: "");

    /// <summary>
    /// Country as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Country", scrubHtml: true) etc.
    /// </summary>
    public string Country => _item.String("Country", fallback: "");

    /// <summary>
    /// EMail as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("EMail", scrubHtml: true) etc.
    /// </summary>
    public string EMail => _item.String("EMail", fallback: "");

    /// <summary>
    /// Facebook as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("Facebook")
    /// </summary>
    public string Facebook => _item.Url("Facebook");

    /// <summary>
    /// Get the file object for Facebook - or null if it's empty or not referencing a file.
    /// </summary>
    public IFile FacebookFile => _item.File("Facebook");

    /// <summary>
    /// Get the folder object for Facebook.
    /// </summary>
    public IFolder FacebookFolder => _item.Folder("Facebook");

    /// <summary>
    /// FirstName as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("FirstName", scrubHtml: true) etc.
    /// </summary>
    public string FirstName => _item.String("FirstName", fallback: "");

    /// <summary>
    /// FullName as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("FullName", scrubHtml: true) etc.
    /// </summary>
    public string FullName => _item.String("FullName", fallback: "");

    /// <summary>
    /// Function as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Function", scrubHtml: true) etc.
    /// </summary>
    public string Function => _item.String("Function", fallback: "");

    /// <summary>
    /// GPS as GPS Coordinates object with Latitude and Longitude.
    /// </summary>
    public GpsCoordinates GPS => _item.Gps("GPS");

    /// <summary>
    /// Image as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("Image")
    /// </summary>
    public string Image => _item.Url("Image");

    /// <summary>
    /// Get the file object for Image - or null if it's empty or not referencing a file.
    /// </summary>
    public IFile ImageFile => _item.File("Image");

    /// <summary>
    /// Get the folder object for Image.
    /// </summary>
    public IFolder ImageFolder => _item.Folder("Image");

    /// <summary>
    /// Instagram as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("Instagram")
    /// </summary>
    public string Instagram => _item.Url("Instagram");

    /// <summary>
    /// Get the file object for Instagram - or null if it's empty or not referencing a file.
    /// </summary>
    public IFile InstagramFile => _item.File("Instagram");

    /// <summary>
    /// Get the folder object for Instagram.
    /// </summary>
    public IFolder InstagramFolder => _item.Folder("Instagram");

    /// <summary>
    /// LastName as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LastName", scrubHtml: true) etc.
    /// </summary>
    public string LastName => _item.String("LastName", fallback: "");

    /// <summary>
    /// LinkedIn as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("LinkedIn")
    /// </summary>
    public string LinkedIn => _item.Url("LinkedIn");

    /// <summary>
    /// Get the file object for LinkedIn - or null if it's empty or not referencing a file.
    /// </summary>
    public IFile LinkedInFile => _item.File("LinkedIn");

    /// <summary>
    /// Get the folder object for LinkedIn.
    /// </summary>
    public IFolder LinkedInFolder => _item.Folder("LinkedIn");

    /// <summary>
    /// Mobile as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Mobile", scrubHtml: true) etc.
    /// </summary>
    public string Mobile => _item.String("Mobile", fallback: "");

    /// <summary>
    /// Phone as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Phone", scrubHtml: true) etc.
    /// </summary>
    public string Phone => _item.String("Phone", fallback: "");

    /// <summary>
    /// Street as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Street", scrubHtml: true) etc.
    /// </summary>
    public string Street => _item.String("Street", fallback: "");

    /// <summary>
    /// Text as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Text", scrubHtml: true) etc.
    /// </summary>
    public string Text => _item.String("Text", fallback: "");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");

    /// <summary>
    /// Twitter as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("Twitter")
    /// </summary>
    public string Twitter => _item.Url("Twitter");

    /// <summary>
    /// Get the file object for Twitter - or null if it's empty or not referencing a file.
    /// </summary>
    public IFile TwitterFile => _item.File("Twitter");

    /// <summary>
    /// Get the folder object for Twitter.
    /// </summary>
    public IFolder TwitterFolder => _item.Folder("Twitter");

    /// <summary>
    /// UrlKey as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("UrlKey", scrubHtml: true) etc.
    /// </summary>
    public string UrlKey => _item.String("UrlKey", fallback: "");

    /// <summary>
    /// ZipCode as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ZipCode", scrubHtml: true) etc.
    /// </summary>
    public string ZipCode => _item.String("ZipCode", fallback: "");
  }
}